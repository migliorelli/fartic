datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int      @id @default(autoincrement())
  username       String   @unique
  socketId       String   @unique
  points         Int      @default(0)
  won            Int      @default(0)
  createdAt      DateTime @default(now())
  inactiveRounds Int      @default(0)

  roomId Int
  room   Room @relation(name: "UserRoom", fields: [roomId], references: [id])

  ownedRoom Room?  @relation(name: "RoomOwner")
  round     Round?
}

model Room {
  id          Int      @id @default(autoincrement())
  publicId    String   @unique @default(dbgenerated("nanoid(11)")) @db.VarChar(11)
  createdAt   DateTime @default(now())
  visible     Boolean  @default(true)
  playerLimit Int      @default(5)
  points      Int      @default(70)

  ownerId Int?  @unique
  owner   User? @relation(name: "RoomOwner", fields: [ownerId], references: [id])

  themeId Int
  theme   Theme @relation(fields: [themeId], references: [id], onDelete: Cascade)

  users User[] @relation(name: "UserRoom")
  round Round?
}

model Round {
  id      Int     @id @default(autoincrement())
  time    Int     @default(120)
  hint    Json? // for "donkey": ["d"," "," ","k"," "," "]
  ongoing Boolean @default(true)

  playerId Int  @unique
  player   User @relation(fields: [playerId], references: [id])

  wordId Int
  word   Word @relation(fields: [wordId], references: [id])

  roomId Int  @unique
  room   Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Theme {
  id   Int    @id @default(autoincrement())
  name String @unique

  rooms Room[]
  words Word[]
}

model Word {
  id      Int    @id @default(autoincrement())
  content String

  themeId Int
  theme   Theme   @relation(fields: [themeId], references: [id])
  round   Round[]
}
